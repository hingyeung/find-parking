AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  dataBucket:
    Type: String
  downloadDestPrefix:
    Type: String
Description: >
  find-parking

  Find parking space using parking sensor data.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"

  IngestParkingSensorDataStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Download Melbourne City Parking Sensor Data and ingest it into MongoDB",
              "StartAt": "DownloadParkingSensorDataState",
              "States": {
                "DownloadParkingSensorDataState": {
                  "Type": "Task",
                  "Resource": "${DownloadParkingSensorDataFunctionArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "CatchAllFallback"
                    }
                  ],
                  "Next": "LoadParkingSensorDataToDBState"
                },
                "LoadParkingSensorDataToDBState": {
                  "Type": "Task",
                  "Resource": "${LoadParkingSensorDataToDBFunctionArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "CatchAllFallback"
                    }
                  ],
                  "End": true
                },
                "CatchAllFallback": {
                  "Type": "Pass",
                  "Result": "This is a fallback from any error code",
                  "End": true
                }
              }
            }
          - {
            DownloadParkingSensorDataFunctionArn: !GetAtt [ DownloadParkingSensorDataFunction, Arn ],
            LoadParkingSensorDataToDBFunctionArn: !GetAtt [ LoadParkingSensorDataToDBFunction, Arn ]
          }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  DownloadParkingSensorDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist
      Handler: download_parking_sensor_data_bundle.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: 'production'
          TARGET_BUCKET: !Ref dataBucket
          TARGET_PREFIX: !Sub "${AWS::StackName}/${downloadDestPrefix}"
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref dataBucket
      - AWSLambdaBasicExecutionRole

  DownloadParkingSensorDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ "/aws/lambda", !Ref DownloadParkingSensorDataFunction ] ]
      RetentionInDays: 7

  DownloadParkingRestrictionsDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist
      Handler: download_parking_restrictions_data_bundle.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: 'production'
          TARGET_BUCKET: !Ref dataBucket
          TARGET_PREFIX: !Sub "${AWS::StackName}/${downloadDestPrefix}"
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref dataBucket
      - AWSLambdaBasicExecutionRole

  DownloadParkingRestrictionsDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ "/aws/lambda", !Ref DownloadParkingRestrictionsDataFunction ] ]
      RetentionInDays: 7

  ParkingSensorQueryHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist
      Handler: parking_sensor_query_handler_bundle.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: 'production'
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ParkingSensorQueryAPI:
          Type: Api
          Properties:
            Path: '/findAvailableParkings'
            Method: GET

  ParkingSensorQueryHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ "/aws/lambda", !Ref ParkingSensorQueryHandlerFunction ] ]
      RetentionInDays: 7

  LoadParkingSensorDataToDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist
      Handler: load_sensor_data_into_db_bundle.handler
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 120
      Environment:
        Variables:
          NODE_ENV: 'production'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref dataBucket
        - AWSLambdaBasicExecutionRole

  LoadParkingSensorDataToDBFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ "/aws/lambda", !Ref LoadParkingSensorDataToDBFunction ] ]
      RetentionInDays: 7
        
Outputs:
  ParkingSensorQueryHandlerApiUrl:
    Description: "URL for parking sensor query handler"
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/findAvailableParkings"

  IngestParkingSensorDataStateMachineArn:
    Description: ARN of state machine that ingests parking sensor data
    Value: !Ref IngestParkingSensorDataStateMachine
